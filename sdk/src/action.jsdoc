/*
 * Copyright 2021 Lightbend Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Context for an action command.
 *
 * @interface module:kalix.Action.ActionCommandContext
 * @extends module:kalix.CommandContext
 * @property {boolean} cancelled Whether the client is still connected.
 * @property {module:kalix.Metadata} metadata The metadata associated with the command.
 */

/**
 * Write a message.
 *
 * @function module:kalix.Action.ActionCommandContext#write
 * @param {Object} message The protobuf message to write.
 * @param {module:kalix.Metadata} [metadata] The metadata associated with the message.
 */

/**
 * Register an event handler.
 *
 * @function module:kalix.Action.ActionCommandContext#on
 * @param {string} eventType The type of the event.
 * @param {function} callback The callback to handle the event.
 */

/**
 * Context for a unary action command.
 *
 * @interface module:kalix.Action.UnaryCommandContext
 * @extends module:kalix.Action.ActionCommandContext
 */

/**
 * DEPRECATED. Forward this command to another service component call, use 'ReplyFactory.forward' instead.
 *
 * @function module:kalix.Action.UnaryCommandContext#forward
 * @param method The service component method to invoke.
 * @param {object} message The message to send to that service component.
 * @param {module:kalix.Metadata} metadata Metadata to send with the forward.
 */

/**
 * Context for a streamed in action command.
 *
 * @interface module:kalix.Action.StreamedInCommandContext
 * @extends module:kalix.Action.StreamedInContext
 * @extends module:kalix.Action.ActionCommandContext
 */

/**
 * Context for a streamed out action command.
 *
 * @interface module:kalix.Action.StreamedOutCommandContext
 * @extends module:kalix.Action.StreamedOutContext
 */

/**
 * Context for a streamed action command.
 *
 * @interface module:kalix.Action.StreamedCommandContext
 * @extends module:kalix.Action.StreamedInContext
 * @extends module:kalix.Action.StreamedOutContext
 */

/**
 * Context for an action command that returns a streamed message out.
 *
 * @interface module:kalix.Action.StreamedOutContext
 * @extends module:kalix.Action.ActionCommandContext
 */

/**
 * A cancelled event.
 *
 * @event module:kalix.Action.StreamedOutContext#cancelled
 */

/**
 * Send a reply
 *
 * @function module:kalix.Action.StreamedOutContext#reply
 * @param {module:kalix.replies.Reply} reply The reply to send
 */

/**
 * Terminate the outgoing stream of messages.
 *
 * @function module:kalix.Action.StreamedOutContext#end
 */

/**
 * Context for an action command that handles streamed messages in.
 *
 * @interface module:kalix.Action.StreamedInContext
 * @extends module:kalix.Action.ActionCommandContext
 */

/**
 * A data event.
 *
 * Emitted when a new message arrives.
 *
 * @event module:kalix.Action.StreamedInContext#data
 * @type {Object}
 */

/**
 * A stream end event.
 *
 * Emitted when the input stream terminates.
 *
 * If a callback is registered and that returns a Reply, then that is returned as a response from the action
 *
 * @event module:kalix.Action.StreamedInContext#end
 */

/**
 * Cancel the incoming stream of messages.
 *
 * @function module:kalix.Action.StreamedInContext#cancel
 */

/**
 * Options for an action.
 *
 * @typedef module:kalix.Action~options
 * @property {array<string>} [includeDirs=["."]] The directories to include when looking up imported protobuf files.
 * @property {array<string>} [forwardHeaders=[]] request headers to be forwarded as metadata to the action
 */

/**
 * A unary action command handler.
 *
 * @callback module:kalix.Action~unaryCommandHandler
 * @param {Object} command The command message, this will be of the type of the gRPC service call input type.
 * @param {module:kalix.Action.UnaryCommandContext} context The command context.
 * @returns {undefined|Object|Promise.<any>|module:kalix.replies.Reply} The message to reply with, it must match the gRPC service call output type for
 *                                     this command. If replying by using context.write, undefined must be returned.
 */

/**
 * A streamed in action command handler.
 *
 * @callback module:kalix.Action~streamedInCommandHandler
 * @param {module:kalix.Action.StreamedInCommandContext} context The command context.
 * @returns {undefined|Object|Promise.<any>} The message to reply with, it must match the gRPC service call output type for
 *                                     this command. If replying by using context.write, undefined must be returned.
 */

/**
 * A streamed out command handler.
 *
 * @callback module:kalix.Action~streamedOutCommandHandler
 * @param {Object} command The command message, this will be of the type of the gRPC service call input type.
 * @param {module:kalix.Action.StreamedOutCommandContext} context The command context.
 */

/**
 * A streamed command handler.
 *
 * @callback module:kalix.Action~streamedCommandHandler
 * @param {module:kalix.Action.StreamedCommandContext} context The command context.
 */

/**
 * An action command handler.
 *
 * @typedef module:kalix.Action.ActionCommandHandler
 * @type {module:kalix.Action~unaryCommandHandler|module:kalix.Action~streamedInCommandHandler|module:kalix.Action~streamedOutCommandHandler|module:kalix.Action~streamedCommandHandler}
 */

/**
 * @classdesc Create a new action.
 *
 * @class module:kalix.Action
 * @implements module:kalix.Component
 * @param {string|string[]} desc A descriptor or list of descriptors to parse, containing the service to serve.
 * @param {string} serviceName The fully qualified name of the service that provides this interface.
 * @param {module:kalix.Action~options=} options The options for this action
 */

/**
 * @name module:kalix.Action#options
 * @type {module:kalix.Action~options}
 */

/**
 * @name module:kalix.Action#serviceName
 * @type {string}
 */

/**
 * @name module:kalix.Action#service
 * @type {protobuf.Service}
 */

/**
 * Access to gRPC clients (with promisified unary methods).
 *
 * @name module:kalix.Action#clients
 * @type module:kalix.GrpcClientLookup
 */

/**
 * The command handlers.
 *
 * The names of the properties must match the names of the service calls specified in the gRPC descriptor
 *
 * @name module:kalix.Action#commandHandlers
 * @type {Object.<string, module:kalix.Action.ActionCommandHandler>}
 */

/**
 * @function module:kalix.Action#componentType
 * @return {string} action component type.
 */

/**
 * Lookup a protobuf message type.
 *
 * This is provided as a convenience to lookup protobuf message types for use with events and snapshots.
 *
 * @function module:kalix.Action#lookupType
 * @param {string} messageType The fully qualified name of the type to lookup.
 * @return {protobuf.Type} The protobuf message type.
 */

/**
 * Set the command handlers for this action.
 *
 * @function module:kalix.Action#setCommandHandlers
 * @param {Object.<string, module:kalix.Action.ActionCommandHandler>} handlers The command handlers.
 * @return {module:kalix.Action} This action.
 */
