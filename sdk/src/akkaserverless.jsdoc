/*
 * Copyright 2021 Lightbend Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Akka Serverless Component.
 *
 * @interface module:akkaserverless.Component
 */

/**
 * Akka Serverless Entity.
 *
 * @interface module:akkaserverless.Entity
 * @extends module:akkaserverless.Component
 */

/**
 * Akka Serverless service.
 *
 * @class module:akkaserverless.AkkaServerless
 * @param {module:akkaserverless.AkkaServerlessOptions} [options] The options for starting the service.
 */

/**
 * @interface module:akkaserverless.AkkaServerlessOptions
 * @property {string} [serviceName] The name of this service (defaults to name from package.json).
 * @property {string} [serviceVersion] The version of this service (defaults to version from package.json).
 * @property {string} [descriptorSetPath="user-function.desc"] Path to a Protobuf FileDescriptor
 *     set, as output by protoc --descriptor_set_out=somefile.desc. This file must contain all of the component services
 *     that this Akka Serverless service serves. See the `compile-descriptor` command for creating this file.
 */

/**
 * Add one or more components to this AkkaServerless service.
 *
 * @function module:akkaserverless.AkkaServerless#addComponent
 * @param {...module:akkaserverless~Component} components The components to add.
 * @returns {module:akkaserverless.AkkaServerless} this AkkaServerless service.
 */

/**
 * Service binding with address and port.
 *
 * @interface module:akkaserverless.ServiceBinding
 * @property {string} [address] The address to bind the Akka Serverless service to.
 * @property {number} [port] The port to bind the Akka Serverless service to.
 */

/**
 * Start the Akka Serverless service.
 *
 * @function module:akkaserverless.AkkaServerless#start
 * @param {module:akkaserverless.ServiceBinding} [binding] optional address/port binding to start the service on.
 * @returns {Promise.<number>} A Promise of the bound port for this service.
 */

/**
 * Shut down the Akka Serverless service.
 *
 * @function module:akkaserverless.AkkaServerless#shutdown
 */

/**
 * Shut down the Akka Serverless service.
 *
 * @function module:akkaserverless.AkkaServerless#tryShutdown
 * @param {module:akkaserverless.AkkaServerless~shutdownCallback} callback - shutdown callback, accepting possible error
 */

/**
 * Callback for tryShutdown, accepting possible error.
 *
 * @callback module:akkaserverless.AkkaServerless~shutdownCallback
 * @param {Error} [error] Error on shutting down the service.
 */

/**
 * Replicated write consistency setting for replicated entities.
 *
 * @readonly
 * @name module:akkaserverless.ReplicatedWriteConsistency
 * @enum {number}
 * @property {number} LOCAL Updates will only be written to the local replica immediately, and then asynchronously
 *                          distributed to other replicas in the background.
 * @property {number} MAJORITY Updates will be written immediately to a majority of replicas, and then asynchronously
 *                             distributed to remaining replicas in the background.
 * @property {number} ALL Updates will be written immediately to all replicas.
 */
