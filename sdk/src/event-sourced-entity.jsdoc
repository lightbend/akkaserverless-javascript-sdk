/*
 * Copyright 2021 Lightbend Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Context for an event sourced command.
 *
 * @interface module:kalix.EventSourcedEntity.EventSourcedEntityCommandContext
 * @extends module:kalix.CommandContext
 * @extends module:kalix.EntityContext
 */

/**
 * Persist an event.
 *
 * The event won't be persisted until the reply is sent to the proxy. Then, the event will be persisted
 * before the reply is sent back to the client.
 *
 * @function module:kalix.EventSourcedEntity.EventSourcedEntityCommandContext#emit
 * @param {module:kalix.Serializable} event The event to emit.
 */

/**
 * An event sourced entity command handler.
 *
 * @callback module:kalix.EventSourcedEntity~commandHandler
 * @param {Object} command The command message, this will be of the type of the gRPC service call input type.
 * @param {module:kalix.Serializable} state The entity state.
 * @param {module:kalix.EventSourcedEntity.EventSourcedEntityCommandContext} context The command context.
 * @returns {undefined|Object|module:kalix.replies.Reply} The message to reply with, it must match the gRPC service call output type for this
 * command, or if a Reply is returned, contain an object that matches the output type.
 */

/**
 * An event sourced entity event handler.
 *
 * @callback module:kalix.EventSourcedEntity~eventHandler
 * @param {module:kalix.Serializable} event The event.
 * @param {module:kalix.Serializable} state The entity state.
 * @returns {module:kalix.Serializable} The new entity state.
 */

/**
 * An event sourced entity behavior.
 *
 * @typedef module:kalix.EventSourcedEntity~behavior
 * @property {Object<string, module:kalix.EventSourcedEntity~commandHandler>} commandHandlers The command handlers.
 *
 * The names of the properties must match the names of the service calls specified in the gRPC descriptor for this
 * event sourced entities service.
 * @property {Object<string, module:kalix.EventSourcedEntity~eventHandler>} eventHandlers The event handlers.
 *
 * The names of the properties must match the short names of the events.
 */

/**
 * An event sourced entity behavior callback.
 *
 * This callback takes the current entity state, and returns a set of handlers to handle commands and events for it.
 *
 * @callback module:kalix.EventSourcedEntity~behaviorCallback
 * @param {module:kalix.Serializable} state The entity state.
 * @returns {module:kalix.EventSourcedEntity~behavior} The new entity state.
 */

/**
 * Initial state callback.
 *
 * This is invoked if the entity is started with no snapshot.
 *
 * @callback module:kalix.EventSourcedEntity~initialCallback
 * @param {string} entityId The entity id.
 * @returns {module:kalix.Serializable} The entity state.
 */

/**
 * Options for an event sourced entity.
 *
 * @typedef module:kalix.EventSourcedEntity~options
 * @property {number} [snapshotEvery=100] A snapshot will be persisted every time this many events are emitted.
 *                                        It is strongly recommended to not disable snapshotting unless it is known that
 *                                        event sourced entities will never have more than 100 events (in which case
 *                                        the default will anyway not trigger any snapshots)
 * @property {array<string>} [includeDirs=["."]] The directories to include when looking up imported protobuf files.
 * @property {boolean} [serializeAllowPrimitives=false] Whether serialization of primitives should be supported when
 * serializing events and snapshots.
 * @property {boolean} [serializeFallbackToJson=false] Whether serialization should fallback to using JSON if an event
 * or snapshot can't be serialized as a protobuf.
 * @property {array<string>} [forwardHeaders=[]] request headers to be forwarded as metadata to the event sourced entity
 * @property {module:kalix.EventSourcedEntity~entityPassivationStrategy} [entityPassivationStrategy] Entity passivation strategy to use.
 */

/**
 * Entity passivation strategy for an event sourced entity.
 *
 * @typedef module:kalix.EventSourcedEntity~entityPassivationStrategy
 * @property {number} [timeout] Passivation timeout (in milliseconds).
 */

/**
 * @classdesc Create a new event sourced entity.
 *
 * @class module:kalix.EventSourcedEntity
 * @implements module:kalix.Entity
 * @param {string|string[]} desc A descriptor or list of descriptors to parse, containing the service to serve.
 * @param {string} serviceName The fully qualified name of the service that provides this entities interface.
 * @param {string} entityType The entity type name for all event source entities of this type. This will be prefixed
 *                            onto the entityId when storing the events for this entity. Be aware that the
 *                            chosen name must be stable through the entity lifecycle.  Never change it after deploying
 *                            a service that stored data of this type
 * @param {module:kalix.EventSourcedEntity~options=} options The options for this event sourced entity
 */

/**
 * @name module:kalix.EventSourcedEntity#options
 * @type {module:kalix.EventSourcedEntity~options}
 */

/**
 * @name module:kalix.EventSourcedEntity#serviceName
 * @type {string}
 */

/**
 * @name module:kalix.EventSourcedEntity#service
 * @type {protobuf.Service}
 */

/**
 * Access to gRPC clients (with promisified unary methods).
 *
 * @name module:kalix.EventSourcedEntity#clients
 * @type module:kalix.GrpcClientLookup
 */

/**
 * @function module:kalix.EventSourcedEntity#componentType
 * @return {string} event sourced entity component type.
 */

/**
 * Lookup a protobuf message type.
 *
 * This is provided as a convenience to lookup protobuf message types for use with events and snapshots.
 *
 * @function module:kalix.EventSourcedEntity#lookupType
 * @param {string} messageType The fully qualified name of the type to lookup.
 * @return {protobuf.Type} The protobuf message type.
 */

/**
 * The initial state callback.
 *
 * @name module:kalix.EventSourcedEntity#initial
 * @type module:kalix.EventSourcedEntity~initialCallback
 */

/**
 * Set the initial state callback.
 *
 * @function module:kalix.EventSourcedEntity#setInitial
 * @param {module:kalix.EventSourcedEntity~initialCallback} callback The initial state callback.
 * @return {module:kalix.EventSourcedEntity} This entity.
 */

/**
 * The behavior callback.
 *
 * @name module:kalix.EventSourcedEntity#behavior
 * @type module:kalix.EventSourcedEntity~behaviorCallback
 */

/**
 * Set the behavior callback.
 *
 * @function module:kalix.EventSourcedEntity#setBehavior
 * @param {module:kalix.EventSourcedEntity~behaviorCallback} callback The behavior callback.
 * @return {module:kalix.EventSourcedEntity} This entity.
 */
