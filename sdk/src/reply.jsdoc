/*
 * Copyright 2021 Lightbend Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

/**
 * Creating replies.
 *
 * @namespace module:kalix.replies
 */

/**
 * Side effect for a reply.
 * 
 * @class module:kalix.replies.Effect
 * @param {protobuf.Method} method The entity service method to invoke.
 * @param {object} message The message to send to that service.
 * @param {boolean} [synchronous=false] Whether the effect should be execute synchronously or not, default is false
 * @param {module:kalix.Metadata} [metadata] Metadata to send with the effect.
 */

/**
 * A return type to allow returning forwards or failures, and attaching effects to messages.
 * 
 * @class module:kalix.replies.Reply
 */

/**
 * @function module:kalix.replies.Reply#getMethod
 * @returns {protobuf.Method|undefined} The protobuf method for a forwarding reply.
 */

/**
 * Set the protobuf method for a forwarding reply.
 *
 * @function module:kalix.replies.Reply#setMethod
 * @param {protobuf.Method} method The protobuf method.
 * @returns {module:kalix.replies.Reply} The updated reply.
 */

/**
 * @function module:kalix.replies.Reply#getMessage
 * @returns {any} the reply message
 */

/**
 * Set the message for this reply.
 *
 * @function module:kalix.replies.Reply#setMessage
 * @param {any} message The reply message.
 * @returns {module:kalix.replies.Reply} The updated reply.
 */

/**
 * @function module:kalix.replies.Reply#getMetadata
 * @returns {module:kalix.Metadata} The metadata attached to the reply.
 */

/**
 * Attach metadata to this reply.
 *
 * @function module:kalix.replies.Reply#setMetadata
 * @param {module:kalix.Metadata|undefined} metadata Metadata to send with the reply.
 * @returns {module:kalix.replies.Reply} The updated reply.
 */


/**
 * @function module:kalix.replies.Reply#getForward
 * @returns {module:kalix.replies.Reply|undefined} The forwarding reply.
 */

/**
 * Make this a forwarding reply.
 *
 * @function module:kalix.replies.Reply#setForward
 * @param {module:kalix.replies.Reply} forward The forward reply.
 * @returns {module:kalix.replies.Reply} The updated reply.
 */

/**
 * @function module:kalix.replies.Reply#getFailure
 * @returns {module:kalix.replies.Failure|undefined} The failure description.
 */

/**
 * Make this a failure reply.
 *
 * @function module:kalix.replies.Reply#setFailure
 * @param {string} failure The failure description.
 * @param {module:kalix.GrpcStatus} [status] the status code to fail with, defaults to Unknown.
 * @returns {module:kalix.replies.Reply} The updated reply.
 */

/**
 * @function module:kalix.replies.Reply#getEffects
 * @returns {module:kalix.replies.Effect[]} The side effects for this reply.
 */

/**
 * Attach the given effect to this reply.
 *
 * @function module:kalix.replies.Reply#addEffect
 * @param {protobuf.Method} method The entity service method to invoke.
 * @param {object} message The message to send to that service.
 * @param {boolean} [synchronous=false] Whether the effect should be execute synchronously or not, default is false.
 * @param {module:kalix.Metadata} [metadata] Metadata to send with the effect.
 * @return {module:kalix.replies.Reply} This reply after adding the effect.
 */

/**
 * Attach the given effects to this reply.
 *
 * @function module:kalix.replies.Reply#addEffects
 * @param {Effect[]} effects One or more service calls to execute as side effects.
 * @return {module:kalix.replies.Reply} This reply after adding the effects.
 */

/**
 * Whether this reply is empty: does not have a message, forward, or failure.
 *
 * @function module:kalix.replies.Reply#isEmpty
 * @return {boolean} Whether the reply is empty.
 */

/**
 * Create a message reply.
 *
 * @function module:kalix.replies~message
 * @param {any} message The message to reply with.
 * @param {module:kalix.Metadata} [metadata] Optional metadata to pass with the reply.
 * @return {module:kalix.replies.Reply} A message reply.
 */

/**
 * Create a forward reply.
 *
 * @function module:kalix.replies~forward
 * @param {protobuf.Method} method The service call representing the forward.
 * @param {any} message The message to forward.
 * @param {module:kalix.Metadata} [metadata] Optional metadata to pass with the forwarded message.
 * @return {module:kalix.replies.Reply} A forward reply.
 */

/**
 * Create a failure reply.
 *
 * @function module:kalix.replies~failure
 * @param {string} description A description of the failure.
 * @param {module:kalix.GrpcStatus} [status] - the GRPC status, defaults to Unknown
 * @return {module:kalix.replies.Reply} A failure reply.
 */

/**
 * Create a reply that contains neither a message nor a forward nor a failure.
 *
 * This may be useful for emitting effects without sending a message.
 *
 * @function module:kalix.replies~noReply
 * @return {module:kalix.replies.Reply} An empty reply.
 */

/**
 * @class module:kalix.replies.Failure
 */

/**
 * @function module:kalix.replies.Failure#getDescription
 * @returns {string}
 */

/**
 * @function module:kalix.replies.Failure#getStatus
 * @returns {module:kalix.GrpcStatus|undefined}
 */
